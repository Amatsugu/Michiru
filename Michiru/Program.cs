using Michiru.Calculation;using System;using SkiaSharp;using System.IO;using Michiru.Utils;using Michiru.Regression;using System.Collections.Generic;using Newtonsoft.Json;using Michiru.Neural;namespace Michiru{    class Program    {		static void Main(string[] args)		{
			Console.Write("Loading Data... ");
			var trainX = ChiruMatrix.FromJSON(File.ReadAllText(@"D:\ChiruData\Train\X.json"));			var trainY = ChiruMatrix.FromJSON(File.ReadAllText(@"D:\ChiruData\Train\Y.json"));			var testY = ChiruMatrix.FromJSON(File.ReadAllText(@"D:\ChiruData\Test\Y.json"));			var testX = ChiruMatrix.FromJSON(File.ReadAllText(@"D:\ChiruData\Test\X.json"));			//Standardize			trainX /= 255;			testX /= 255;
			Console.WriteLine("Done!");

			Console.WriteLine("Training:");
			var r = NeuralNetwork.Model(trainX, trainY, 1000, 250, true);			File.WriteAllText(@"D:\ChiruData\NN\W1.json", r.W1.ToJSON());			File.WriteAllText(@"D:\ChiruData\NN\W2.json", r.W2.ToJSON());			File.WriteAllText(@"D:\ChiruData\NN\b1.json", r.b1.ToJSON());			File.WriteAllText(@"D:\ChiruData\NN\b2.json", r.b2.ToJSON());			var p = NeuralNetwork.Predict(r.W1, r.b1, r.W2, r.b2, testX);			Console.WriteLine($"{(((testY / p.T) + ((1-testY) / (1 - p.T))).Sum()/testY.Width) * 100}%");			Console.ReadLine();		}    }}